function [q_table, pos_table] = generateArcLegGaitTable_bodyBased(leg, pivot_body, ...
    arc_deg, step_height, stride_length, steps_per_cycle)
% One arc segment for a leg (curved walking), computed from pivot relative to body.
% All positions are returned in body frame.

% Arc radius
foot_init = leg.poses.standing.footPos(:);  % [x; y; z]
rel = foot_init(1:2) - pivot_body;          % vector from pivot to foot
R_leg = norm(rel);                          % radius
theta0 = atan2(rel(2), rel(1));             % start angle in pivot frame
theta1 = theta0 + deg2rad(arc_deg);         % end angle

theta_list = linspace(theta0, theta1, steps_per_cycle);

q_table = zeros(steps_per_cycle, 4);
pos_table = zeros(steps_per_cycle, 3);

base_z = foot_init(3);

for i = 1:steps_per_cycle
    theta = theta_list(i);

    % Point on arc in pivot frame
    x_pivot = R_leg * cos(theta);
    y_pivot = R_leg * sin(theta);
    foot_world = pivot_body + [x_pivot; y_pivot];

    % Convert to body frame (since body not rotating)
    foot_rel = foot_world;

    % Z trajectory
    % Phase (0 to 1)
    phase = mod((i-1)/steps_per_cycle, 1.0);

    % Z trajectory (only Z changes between swing/stance)
    if phase < 0.5  % swing
        swing_phase = phase * 2;
        z = base_z + step_height * sin(pi * swing_phase);
    else            % stance
        z = base_z;
    end


    pos_body = [foot_rel; z];

    % IK
    try
        q = leg.ik(pos_body);
    catch
        warning("IK failed for %s at pos [%.1f %.1f %.1f]", ...
            leg.name, pos_body(1), pos_body(2), pos_body(3));
        q = nan(1,4);
    end

    q_table(i,:) = q;
    pos_table(i,:) = pos_body';
end
end
